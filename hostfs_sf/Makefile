# defaults
TOP ?= ..
ARMIPS ?= armips

REGION ?= usa

# crc for each thing
ifeq ($(REGION),usa)
PNACH_CRC = F32494AC
else
$(error invalid region)
endif


# Set some stuff
PNACH_NAME = hostfs

THUNK_SCRIPTS = generate_thunk_asm.py templates/thunk.jinja2
DEPS = $(OBJS)
PNACH_JSON = obj/$(REGION)/patch.json

# asm chunks 
OBJS := obj/$(REGION)/CPS2CDStore_ct.bin \
		obj/$(REGION)/sceCdStInit.bin \
		obj/$(REGION)/mpeg_first_chunk.bin

include $(TOP)/make/rules.mk

obj/:
	mkdir -p $@

obj/$(REGION)/: obj/
	mkdir -p $@

clean-user:
	rm -rf obj/

# The patch.json. Generated because it's easier that way
$(PNACH_JSON): obj/$(REGION)/ regions/$(REGION).inc make_patch_json.py
	./make_patch_json.py $(REGION) > $@

# The thunk assembly. Generated by the mentioned script.
obj/$(REGION)/hostfs_thunks.asm: obj/$(REGION)/ regions/$(REGION).inc $(THUNK_SCRIPTS)
	./generate_thunk_asm.py obj/$(REGION)/hostfs_thunks_noheader.asm $(REGION)
	$(TOP)/make/headerize_asm.py obj/$(REGION)/hostfs_thunks_noheader.asm $@ $(REGION)

# ASM products
$(eval $(call make_asm_without_headerize,obj/$(REGION)/hostfs_thunks.asm,obj/$(REGION)/CPS2CDStore_ct.bin))
#$(eval $(call make_asm,europacd.asm,obj/$(REGION)/EuropaCD_Load.bin))
$(eval $(call make_asm,scecdst.asm,obj/$(REGION)/sceCdStInit.bin))
$(eval $(call make_asm,mpeg_video.asm,obj/$(REGION)/mpeg_first_chunk.bin))